(* ------------------------------------------ *)
(* ----------------- SELECT ----------------- *)
(* ------------------------------------------ *)
select_statement = "SELECT" , [ "DISTINCT" | "ALL" ] , select_expression , { "," , select_expression } ,
    "FROM" , table_expression ,
    "WHERE" , expression ,
    "GROUP BY" , expression , { "," , expression } , "HAVING" , expression ,
    "ORDER BY" , order , { "," , expression } , "LIMIT" , number ;

select_expression = "*" | term , [ "AS" , column_alias ] ;

term = value | function | "(" + operand + ")" | ( [ table_alias , "." ] , column_ref ) | row_value_constructor ;

(* equivalent to Value::* tokens *)
value = string | numeric | boolean | null;

operand = factor , { "+" | "-" , factor } ;

factor = term , { "*" | "/" , term } ;

table_alias = name ;

(* equivalent to token of type Identifier *)
name = "A-Z" | "_" , { "A-Z" | "_" | "0-9" } ;

column_ref = name ;

row_value_constructor = "(" , term , "," , term , { "," , term } , ")";

column_alias = name ;

table_expression = table_name , [ "AS" , table_alias ] ;

table_name = name ;

table_alias = name ;

expression = and_condition , { "OR" , and_condition } ;

and_condition = condition , { "AND" , condition }

condition = ( operand , [ 
        ( compare , operand ) 
        | ( [ "NOT" ] , "IN" , "(" , constant_operand , { "," , constant_operand } , ")" ) 
        | ( [ "NOT" ] , "LIKE" , string )
        | ( [ "NOT" ] , "BETWEEN" , operand , "AND" , operand )
        | ( "IS" , [ "NOT" ] , "NULL" )
    ] )
    | "NOT" , expression
    | "(" , expression , ")" ;

(* equivalent to compare Operator::* tokens *)
compare = "<>" | "<=" | ">=" | "=" | "<" | ">" | "!=" ;

constant_operand = operand ;

order = expression , [ "ASC" | "DESC" ] ;

(* equivalent to a Value::Integer token *)
number = "0-9" , [ number ] ;

(* ------------------------------------------ *)
(* ----------------- CREATE ----------------- *)
(* ------------------------------------------ *)
create_statement = "CREATE TABLE" , table_ref , "(" , column_def , { "," , column_def } , ")" ;

table_ref = table_name ;

column_def = column_ref , data_type ;

(* equivalent to a DataType::* token (except for varchar) *)
data_type = "INTEGER" | ... | ( "VARCHAR" , "(" , number ")" ) ;

(* ------------------------------------------ *)
(* -------------- CREATE INDEX -------------- *)
(* ------------------------------------------ *)
index_statement = "CREATE INDEX" , index_name , "ON" , table_ref , "(" , column_ref , { "," , column_ref } ")";

index_name = name ;

(* ------------------------------------------ *)
(* ----------------- DELETE ----------------- *)
(* ------------------------------------------ *)
delete_statement = "DELETE" , "FROM" , table_name , [ "WHERE" , expression ] , [ "LIMIT" , number ] ;

(* ------------------------------------------ *)
(* ----------------- INSERT ----------------- *)
(* ------------------------------------------ *)
insert_statement = "INSERT INTO" , [ "(" , column_ref , { "," , column_ref } , ")" ] ,
    "VALUES" , "(" , constant_term , { "," , constant_term } , ")";

constant_term = term ;

(* ------------------------------------------ *)
(* ----------------- UPDATE ----------------- *)
(* ------------------------------------------ *)
update_statement = "UPDATE" , table_ref , 
    "SET" , column_ref , "=" , value , { "," , column_ref , "=" , value } ,
    "WHERE" , expression ;

(* ------------------------------------------ *)
(* ----------------- EXPLAIN ---------------- *)
(* ------------------------------------------ *)
explain_statement = "EXPLAIN" , ( select_statement | update_statement | delete_statement ) ;

(* ------------------------------------------ *)
(* --------------- TRANSACTION -------------- *)
(* ------------------------------------------ *)
transaction_statement = "BEGIN" | "COMMIT" | "ROLLBACK" ;

(* ------------------------------------------ *)
(* --------------- FUNCTTIONS --------------- *)
(* ------------------------------------------ *)
function = function_count | function_sum | function_avg | function_min | function_max | function_now ;

function_count = "COUNT" , "(" , [ "DISTINCT" ] , ( "*" | term ) , ")" ;

function_sum = "SUM" , "(" , term , ")" ;

function_avg = "AVG" , "(" , term , ")" ;

function_min = "MIN" , "(" , term , ")" ;

function_max = "MAX" , "(" , term , ")" ;

function_now = "NOW" , "(" , ")"